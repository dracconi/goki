package main

import (
	"fmt"
	"os"
	"encoding/json"
	"net/http"
	"strings"
	"github.com/d4l3k/go-pry/pry"
)

func main() {

type Post struct{
	No            int    `json:"no"`
	Sub           string `json:"sub,omitempty"`
	Com           string `json:"com"`
	Name          string `json:"name"`
	Capcode       string `json:"capcode,omitempty"`
	Time          int    `json:"time"`
	OmittedPosts  int    `json:"omitted_posts,omitempty"`
	OmittedImages int    `json:"omitted_images,omitempty"`
	Sticky        int    `json:"sticky"`
	Locked        int    `json:"locked"`
	Cyclical      string `json:"cyclical"`
	Bumplocked    string `json:"bumplocked"`
	LastModified  int    `json:"last_modified"`
	ID            string `json:"id"`
	TnH           int    `json:"tn_h,omitempty"`
	TnW           int    `json:"tn_w,omitempty"`
	H             int    `json:"h,omitempty"`
	W             int    `json:"w,omitempty"`
	Fsize         int    `json:"fsize,omitempty"`
	Filename      string `json:"filename,omitempty"`
	Ext           string `json:"ext,omitempty"`
	Tim           string `json:"tim,omitempty"`
	Fpath         int    `json:"fpath,omitempty"`
	Spoiler       int    `json:"spoiler,omitempty"`
	Md5           string `json:"md5,omitempty"`
	Resto         int    `json:"resto"`
	Embed         string `json:"embed,omitempty"`
	EmbedThumb    string `json:"embed_thumb,omitempty"`
	Email         string `json:"email,omitempty"`
	ExtraFiles    []struct {
		TnH      int    `json:"tn_h"`
		TnW      int    `json:"tn_w"`
		H        int    `json:"h"`
		W        int    `json:"w"`
		Fsize    int    `json:"fsize"`
		Filename string `json:"filename"`
		Ext      string `json:"ext"`
		Tim      string `json:"tim"`
		Fpath    int    `json:"fpath"`
		Spoiler  int    `json:"spoiler"`
		Md5      string `json:"md5"`
	} `json:"extra_files,omitempty"`
}

type Posts struct {
	Posts []Post
}


	var posts Posts

	type Configuration struct {
		Links []string
		Output string
	}

	file, _ := os.Open("conf.json")
	decoder := json.NewDecoder(file)
	configuration := Configuration{}
	err := decoder.Decode(&configuration)
	if err != nil {
		fmt.Println("error:", err)
	}

	fmt.Print("goki\noutput folder:"+configuration.Output)

	for _, el := range configuration.Links {
		split := strings.Split(el,"/")
		id := strings.Split(split[len(split)-1],".")[0]

		path := configuration.Output+"/"+split[3]+"/"+id
		os.MkdirAll(path, os.ModePerm)

		var endpoint,url string

		switch split[2]{
		case "boards.4chan.org":
			endpoint = "https://a.4cdn.org/"+split[3]+"/thread/"+split[len(split)-1]+".json"
			url = "https://i.4cdn.org/"+split[3]+"/"
		case "8ch.net":
			endpoint = "https://8ch.net/"+split[3]+"/res/"+strings.Split(split[len(split)-1],".")[0]+".json"
			url = "https://media.8ch.net/file_store/"
		}

		resp, err := http.Get(endpoint)
		if err!=nil{
			panic(err)
		}

		//bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err!=nil{
			panic(err)
		}
		httpdec := json.NewDecoder(resp.Body)
		httpdec.Decode(&posts)
		for _,  post := range posts.Posts {
			fmt.Printf(url+post.Tim+post.Ext+" \n "+split[3]+"/"+post.Tim)
			pry.Pry()
			err := fetchImage(url+post.Tim+post.Ext,configuration.Output+"/"+split[3]+"/"+id+"/"+post.Tim+post.Ext)
			if err!=""{
				panic(err)
			}
		}

	}

}
